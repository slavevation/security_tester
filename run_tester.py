from tester.parser import APIParser
from tester.generator import AttackGenerator
from tester.executor import APIExecutor
from tester.analyzer import APIAnalyzer
import json
import os                 
from datetime import datetime 

OPENAPI_FILE_PATH = "openapi.json"
BASE_URL = "http://127.0.0.1:8000" 
RESULTS_DIR = "results"          

def main():
    os.makedirs(RESULTS_DIR, exist_ok=True) # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    report_filename = f"test_report_{timestamp}.txt"
    report_filepath = os.path.join(RESULTS_DIR, report_filename)
    
    report_lines = [] # –¢—É—Ç –±—É–¥–µ–º–æ –∑–±–∏—Ä–∞—Ç–∏ –≤–µ—Å—å –Ω–∞—à –≤–∏–≤—ñ–¥
    
    # –°—Ç–≤–æ—Ä–∏–º–æ –º–∞–ª–µ–Ω—å–∫—É —Ñ—É–Ω–∫—Ü—ñ—é, —â–æ–± –æ–¥–Ω–æ—á–∞—Å–Ω–æ –¥—Ä—É–∫—É–≤–∞—Ç–∏ —ñ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏
    def log(message):
        print(message)
        report_lines.append(message)

    log("--- [–ó–∞–ø—É—Å–∫ –¢–µ—Å—Ç—É–≤–∞–ª—å–Ω–∏–∫–∞ –ë–µ–∑–ø–µ–∫–∏ API] ---")
    log(f"–ß–∞—Å –∑–∞–ø—É—Å–∫—É: {timestamp}")
    
    # --- –ö–†–û–ö 1: –ü–ê–†–°–ò–ù–ì ---
    log(f"\n[–ö—Ä–æ–∫ 1] –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—É {OPENAPI_FILE_PATH}...")
    parser = APIParser(filepath=OPENAPI_FILE_PATH)
    all_endpoints = parser.parse_endpoints()
    log(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ! –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_endpoints)} –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤.")

    # --- –ö–†–û–ö 2: –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ê–¢–ê–ö (LLM) ---
    log("\n[–ö—Ä–æ–∫ 2] –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç-–∫–µ–π—Å—ñ–≤ (LLM)...")
    generator = AttackGenerator()
    all_test_plans = [] 
    
    for ep in all_endpoints:
        log(f"  > –ì–µ–Ω–µ—Ä—É—é —Ç–µ—Å—Ç–∏ –¥–ª—è [{ep['method']}] {ep['path']}...")
        test_cases = generator.generate_test_cases_for_endpoint(ep)
        if test_cases:
            all_test_plans.append({"endpoint": ep, "tests": test_cases})
    log(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ø–ª–∞–Ω–∏ –∞—Ç–∞–∫ –¥–ª—è {len(all_test_plans)} –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤.")


    # --- –ö–†–û–ö 3: –í–ò–ö–û–ù–ê–ù–ù–Ø –ê–¢–ê–ö ---
    log("\n[–ö—Ä–æ–∫ 3] –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∞—Ç–∞–∫...")
    executor = APIExecutor(base_url=BASE_URL)
    all_results = [] 
    
    for plan in all_test_plans:
        ep = plan['endpoint']
        log(f"\n  > –¢–µ—Å—Ç—É—é [{ep['method']}] {ep['path']}...")
        
        for test in plan['tests']:
            json_payload = None
            url_param_payload = None
            param_name = None
            if ep['requestBodySchema']:
                json_payload = test['payload']
            elif ep['parameters']:
                url_param_payload = str(test['payload'])
                param_name = ep['parameters'][0]['name'] 
            
            result = executor.execute_test(
                method=ep['method'],
                path=ep['path'],
                json_payload=json_payload,
                url_param_payload=url_param_payload,
                param_name=param_name
            )
            
            log(f"    - –ê—Ç–∞–∫–∞: {test['description'][:70]}...")
            log(f"    - > –†–ï–ó–£–õ–¨–¢–ê–¢: –°—Ç–∞—Ç—É—Å {result['status_code']} –∑–∞ {result['time_seconds']:.2f} —Å–µ–∫.")
            if result['error']:
                log(f"    - > ‚ùóÔ∏è –ü–û–ú–ò–õ–ö–ê: {result['body']}") 
            
            all_results.append({ "endpoint": ep, "test": test, "result": result })

    # --- –ö–†–û–ö 4: –ê–ù–ê–õ–Ü–ó –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í ---
    log("\n" + "="*50)
    log("--- üèÅ –§–Ü–ù–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢ –ü–†–û –í–†–ê–ó–õ–ò–í–û–°–¢–Ü ---")
    log("="*50)
    
    analyzer = APIAnalyzer()
    vulnerabilities = analyzer.analyze_results(all_results)
    
    if not vulnerabilities:
        log("\n‚úÖ –í—ñ—Ç–∞—î–º–æ! –ñ–æ–¥–Ω–∏—Ö –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        log("   –í–∞—à–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∏–ø—ñ–≤ (—Å—Ç–∞—Ç—É—Å–∏ 422) —Ç–∞ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ (—Å—Ç–∞—Ç—É—Å–∏ 201)")
        log("   –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–æ–±–∏–ª–∏ –≤—Å—ñ –∞—Ç–∞–∫–∏.")
        log("\n   –ü–æ—è—Å–Ω–µ–Ω–Ω—è:")
        log("   - –°—Ç–∞—Ç—É—Å 422 (Unprocessable Entity): –í–∞—à API –∑–∞—Ö–∏—â–µ–Ω–∏–π –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é. –í—ñ–Ω –≤—ñ–¥—Ö–∏–ª–∏–≤")
        log("     —à–∫—ñ–¥–ª–∏–≤–∏–π –≤–≤—ñ–¥ (–Ω–∞–ø—Ä., —Ä—è–¥–æ–∫ –∑–∞–º—ñ—Å—Ç—å —á–∏—Å–ª–∞) *–¥–æ* —Ç–æ–≥–æ, —è–∫ –≤—ñ–Ω –ø–æ—Ç—Ä–∞–ø–∏–≤ –¥–æ –ª–æ–≥—ñ–∫–∏.")
        log("   - –°—Ç–∞—Ç—É—Å 201 (Created) –∑–∞ 0.0 —Å–µ–∫: –í–∞—à API –∑–±–µ—Ä—ñ–≥ —à–∫—ñ–¥–ª–∏–≤–∏–π —Ä—è–¥–æ–∫ (–Ω–∞–ø—Ä., SQLi)")
        log("     —è–∫ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç, –∞–ª–µ *–Ω–µ –≤–∏–∫–æ–Ω–∞–≤* –π–æ–≥–æ. –¶–µ —Ç–∞–∫–æ–∂ –±–µ–∑–ø–µ—á–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞.")
    else:
        log(f"\nüö® –£–í–ê–ì–ê! –ó–Ω–∞–π–¥–µ–Ω–æ {len(vulnerabilities)} –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç–µ–π:")
        for i, vuln in enumerate(vulnerabilities):
            log(f"\n--- –í—Ä–∞–∑–ª–∏–≤—ñ—Å—Ç—å #{i+1} ---")
            log(f"  –¢–∏–ø      : {vuln['vulnerability']['type']}")
            log(f"  –ï–Ω–¥–ø–æ—ñ–Ω—Ç : {vuln['endpoint']}")
            log(f"  –î–µ—Ç–∞–ª—ñ   : {vuln['vulnerability']['details']}")
            log(f"  Payload  : {json.dumps(vuln['payload'])}")
    
    log("\n--- [–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ] ---")

    # --- 5. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç —É —Ñ–∞–π–ª ---
    try:
        with open(report_filepath, 'w', encoding='utf-8') as f:
            f.write("\n".join(report_lines))
        print("\n" + "="*50)
        print(f"‚úÖ –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª:")
        print(f"   {report_filepath}")
        print("="*50)
    except Exception as e:
        print(f"\n‚ùóÔ∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É —É —Ñ–∞–π–ª: {e}")


if __name__ == "__main__":
    main()