from tester.generator import AttackGenerator
from tester.parser import APIParser
from tester.executor import APIExecutor
import json 

OPENAPI_FILE_PATH = "openapi.json"
BASE_URL = "http://127.0.0.1:8000"

def main():
    print("--- [–ó–∞–ø—É—Å–∫ –¢–µ—Å—Ç—É–≤–∞–ª—å–Ω–∏–∫–∞ –ë–µ–∑–ø–µ–∫–∏ API] ---")
    
    print(f"\n[–ö—Ä–æ–∫ 1] –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—É {OPENAPI_FILE_PATH}...")
    
    parser = APIParser(filepath=OPENAPI_FILE_PATH)
    all_endpoints = parser.parse_endpoints()
    
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ! –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_endpoints)} –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤.")
    print("-" * 30)
    
    for ep in all_endpoints:
        print(f"  [{ep['method']}] {ep['path']}")
        print(f"    Summary: {ep['summary']}")
        
        if ep['parameters']:
            param_names = [param['name'] for param in ep['parameters']]
            print(f"    URL Parameters : {param_names}")

        if ep['requestBodySchema']:
            print(f"    Body Schema    :")
            
            schema_pretty = json.dumps(ep['requestBodySchema'], indent=8)
            print(f"{schema_pretty}")
                
        print("-" * 20) 

    print("\n[–ö—Ä–æ–∫ 2] –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç-–∫–µ–π—Å—ñ–≤ (LLM)...")

    generator = AttackGenerator()
    all_test_plans = []

    for ep in all_endpoints:
        print(f"  > –ì–µ–Ω–µ—Ä—É—é —Ç–µ—Å—Ç–∏ –¥–ª—è [{ep['method']}] {ep['path']}...")
        
        # 3. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∞ –ø—Ä–æ—Å–∏–º–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç–∏
        test_cases = generator.generate_test_cases_for_endpoint(ep)
        
        if test_cases:
            print(f"    ... ‚úÖ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(test_cases)} —Ç–µ—Å—Ç-–∫–µ–π—Å—ñ–≤.")
            # 4. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–ª–∞–Ω –∞—Ç–∞–∫–∏
            all_test_plans.append({
                "endpoint": ep,
                "tests": test_cases
            })
        else:
            print("    ... ‚ö™Ô∏è —Ç–µ—Å—Ç-–∫–µ–π—Å–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ.")

    # --- –í–∏–≤–µ–¥–µ–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ---
    print("\n--- [–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –ü–ª–∞–Ω–∏ –ê—Ç–∞–∫] ---")
    for plan in all_test_plans:
        ep = plan['endpoint']
        print(f"\nüìç –ï–Ω–¥–ø–æ—ñ–Ω—Ç: [{ep['method']}] {ep['path']}")
        for test in plan['tests']:
            print(f"  - –ê—Ç–∞–∫–∞: {test['description']}")
            print(f"  - Payload: {json.dumps(test['payload'])}")
    
    print("\n[–ö—Ä–æ–∫ 3] –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∞—Ç–∞–∫...")
    
    executor = APIExecutor(base_url=BASE_URL)
    all_results = [] 

    for plan in all_test_plans:
        ep = plan['endpoint']
        method = ep['method']
        path = ep['path']
        
        print(f"\n  > –¢–µ—Å—Ç—É—é [{method}] {path}...")
        
        for test in plan['tests']:
            payload = test['payload']
            json_payload = None
            url_param_payload = None
            param_name = None

            if ep['requestBodySchema']:
                # Payload –π–¥–µ –≤ —Ç—ñ–ª–æ JSON
                json_payload = payload
            elif ep['parameters']:
                # Payload –π–¥–µ –≤ URL
                url_param_payload = str(payload)
                # (–ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–¥–∏–Ω, —â–æ –≤—ñ—Ä–Ω–æ –¥–ª—è –Ω–∞—à–æ–≥–æ API)
                param_name = ep['parameters'][0]['name'] 
            
            # 4. –í–ò–ö–û–ù–£–Ñ–ú–û –¢–ï–°–¢!
            result = executor.execute_test(
                method=method,
                path=path,
                json_payload=json_payload,
                url_param_payload=url_param_payload,
                param_name=param_name
            )
            
            # 5. –î—Ä—É–∫—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç
            print(f"    - –ê—Ç–∞–∫–∞: {test['description']}")
            print(f"    - > –†–ï–ó–£–õ–¨–¢–ê–¢: –°—Ç–∞—Ç—É—Å {result['status_code']} –∑–∞ {result['time_seconds']:.2f} —Å–µ–∫.")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å–µ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            all_results.append({
                "endpoint": ep,
                "test": test,
                "result": result
            })

if __name__ == "__main__":
    main()