from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from enum import Enum
from typing import List, Optional
import sqlite3 
import time
from contextlib import asynccontextmanager

app = FastAPI()
DB_NAME = "vulnerable.db"

def init_db():
    """–°—Ç–≤–æ—Ä—é—î –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–∏—Ö —Ç–∞ —Ç–∞–±–ª–∏—Ü—é, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î."""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT,
            status TEXT
        )
        """)
        conn.commit()
        conn.close()
        print(f"–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö '{DB_NAME}' —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")

@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ö–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è 1 —Ä–∞–∑ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º
    print("üöÄ –î–æ–¥–∞—Ç–æ–∫ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è... –ó–∞–ø—É—Å–∫–∞—é init_db().")
    init_db()
    yield
    # –ö–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è 1 —Ä–∞–∑ –ü–Ü–°–õ–Ø –∑—É–ø–∏–Ω–∫–∏ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    print("Application is shutting down...")

# --- 3. –ü–µ—Ä–µ–¥–∞—î–º–æ lifespan —É –Ω–∞—à app ---
app = FastAPI(lifespan=lifespan)

class TaskStatus(str, Enum):
    TODO = "to-do"
    IN_PROGRESS = "in-progress"
    DONE = "done"

class Item(BaseModel):
    id: Optional[int] = None
    title: str
    description: Optional[str] = None
    status: TaskStatus = TaskStatus.TODO

class StatusUpdate(BaseModel):
    new_status: TaskStatus

db: List[Item] = []
current_id = 0

@app.get("/")
async def read_root():
    return {"message": "My First FastAPI Application!"}

@app.post("/items/", status_code=201)
async def create_item(item: Item):
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è executescript —Å–∞–º–µ –ø–æ —Å–æ–±—ñ —î —Ä–∏–∑–∏–∫–æ–º
        # –•–æ—á–∞ Pydantic –Ω–∞—Å —Ç—É—Ç —Ä—è—Ç—É—î –≤—ñ–¥ SQLi –≤ `item.title`
        sql_script = f"""
        INSERT INTO items (title, description, status) 
        VALUES ('{item.title}', '{item.description}', '{item.status.value}');
        """
        cursor.executescript(sql_script) # .executescript() –º–æ–∂–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ SLEEP!
        
        new_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç
        new_item = item.model_copy(update={"id": new_id})
        return new_item
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Database error: {e}")

@app.get("/items/")
async def get_items():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –ë–î."""
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row # –©–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ dict-–ø–æ–¥—ñ–±–Ω—ñ —Ä—è–¥–∫–∏
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM items")
    rows = cursor.fetchall()
    conn.close()
    return [dict(row) for row in rows] # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É —Å–ø–∏—Å–æ–∫ dict

@app.get("/items/{item_id}")
async def get_item_by_id(item_id: str): # <-- ‚ùóÔ∏è –í–†–ê–ó–õ–ò–í–Ü–°–¢–¨ ‚Ññ1: –ü—Ä–∏–π–º–∞—î–º–æ `str`
    """
    –®—É–∫–∞—î —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –û–î–ù–ï –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –π–æ–≥–æ ID.
    –î—É–∂–µ –≤—Ä–∞–∑–ª–∏–≤–∏–π –¥–æ SQL Injection.
    """
    
    # ‚ùóÔ∏è –í–†–ê–ó–õ–ò–í–Ü–°–¢–¨ ‚Ññ2: –°–∏–º—É–ª—è—Ü—ñ—è Time-based SQLi
    # –Ø–∫—â–æ payload –º—ñ—Å—Ç–∏—Ç—å 'sleep', –º–∏ —á–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥
    if "sleep" in item_id.lower():
        print("!!! –ê—Ç–∞–∫–∞ 'SLEEP' –≤–∏—è–≤–ª–µ–Ω–∞! –°–∏–º—É–ª—é—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É 5 —Å–µ–∫... !!!")
        time.sleep(5)
    
    try:
        conn = sqlite3.connect(DB_NAME)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # ‚ùóÔ∏è –í–†–ê–ó–õ–ò–í–Ü–°–¢–¨ ‚Ññ3: –ù–µ–±–µ–∑–ø–µ—á–Ω–∏–π f-string
        # –Ø–∫—â–æ item_id = "1 OR 1=1", –∑–∞–ø–∏—Ç —Å—Ç–∞–Ω–µ "SELECT * ... WHERE id = 1 OR 1=1"
        sql_query = f"SELECT * FROM items WHERE id = {item_id}" 
        
        print(f"  > –í–∏–∫–æ–Ω—É—é –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–π SQL: {sql_query}") # (–¥–ª—è –¥–µ–±–∞–≥—É)
        
        cursor.execute(sql_query)
        row = cursor.fetchone()
        conn.close()
        
        if row:
            return dict(row)
        raise HTTPException(status_code=404, detail="Item not found")
    except Exception as e:
        # –ê—Ç–∞–∫–∞ 'Error-based' (–Ω–∞–ø—Ä., `1'`) –≤–∏–∫–ª–∏—á–µ –ø–æ–º–∏–ª–∫—É —Ç—É—Ç
        print(f"!!! SQL –ü–æ–º–∏–ª–∫–∞: {e} !!!")
        raise HTTPException(status_code=500, detail=f"SQL Error: {e}")

@app.get("/statuses")
async def get_statuses():
    return [status.value for status in TaskStatus]

@app.delete("/items/{item_id}")
async def delete_item(item_id: int):
    for item in db:
        if item.id == item_id:
            db.remove(item)
            return {"status": "Item deleted successfully"}
    raise HTTPException(status_code=404, detail="Item not found")
    
@app.put("/items/{item_id}")
async def update_item(item_id: int, updated_item: Item):
    for index, item in enumerate(db):
        if item.id == item_id:
            updated_item.id = item_id
            db[index] = updated_item
            return updated_item
    raise HTTPException(status_code=404, detail="Item not found")

@app.patch("/items/{item_id}/status")
async def update_item_status(item_id: int, status: StatusUpdate):
    for item in db:
        if item.id == item_id:
            item.status = status.new_status
            return item
    raise HTTPException(status_code=404, detail="Item not found")